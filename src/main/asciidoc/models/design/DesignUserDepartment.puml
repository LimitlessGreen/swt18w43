@startuml

!include stylesheet.iuml

rectangle salespoint-framework-7.0.0.RELEASE.jar {

    namespace org.salespointframework.useraccount {
        class UserAccount <<Salespoint>> {
            -userAccountIdentifier : UserAccountIdentifier
            -password : Password
            -firstname : String
            -lastname : String
            -email : String
            -roles : Set<Role>
            -enable : boolean

            +UserAccount()
            +UserAccount(UserAccountIdentifier, String, Role...)
            +UserAccount(UserAccountIdentifier, String, String, String, String, Collection<Role>)
            +getID() : UserAccountIdentifier
            +getUserName() : String
            +add(Role) : boolean
            +remove(Role) : boolean
            +hasRole() : boolean
            +getRoles() : Streamable<Role>
        }

        class Role <<Salespoint>>{
            -name : String

            +{static} of(String) : Role
        }

        interface UserAccountRepository <<Salespoint>> {
            +save(UserAccount) : UserAccount
            +saveAll(Iterable<UserAccount>) : Iterable<UserAccount>
            +findById(UserAccountIdentifier) : Optional<UserAccount>
            +existsById(UserAccountIdentifier) : boolean
            +findAll() : Iterable<UserAccount>
            +findAllById(Iterable<UserAccountIdentifier>) : Iterable<UserAccount>
            +count() : long
            +deleteById(UserAccountIdentifier) : void
            +delete(UserAccount) : void
            +deleteAll(Iterable<UserAccount>) : void
            +deleteAll() : void
            +findByEnabledTrue() : Streamable<UserAccount>
            +findByEnabledFalse() : Streamable<UserAccount>
        }

        interface UserAccountManager <<Salespoint>>

    }

    namespace org.salespointframework.context {
        class ApplicationEvent <<Salespoint>>{

        }

    }

    package org.salespointframework.time {
        interface BusinessTime <<Salespoint>> {

        }
    }

    namespace org.salespointframework.core {
        class SalespointIdentifier <<Salespoint>>{

        }
    }

}



rectangle Bioladen {

  

    namespace bioladen.customer {

        class CustomerController <<Controller>> {
            -authentictaionManager : AuthenticationManager
            -customerManager : CustomerManager
            +registerNew(String, String, String, String, String, String, String, String) : String
            +customerRepository() : String
            +deleteCustomer(Long) : String

        }

        class Customer <<Entity>> {
            -id : Long
            -firstname : String
            -lastname : String
            -email : String
            -phone : String
            -id : CustomerIdentifier
            -customerType : CustomerType
            -sex : Sex

            Customer(String, String, String, Sex, CustomerType)
            publishCustomerCreatedEvent(Customer) : void
            +isCustomerType(CustomerType) : Boolean
            +getName() : String

        }

        enum CustomerType {
            MANAGER
            STAFF
            MAJOR_CUSTOMER
            HOUSE_CUSTOMER
            -typeName : String
            -discount : Double
        }

        enum Sex {
            MALE
            FEMALE
            VARIOUS
            -sexName : String
        }

        class CustomerManager <<Service>>{
            -authentictaionManager : AuthenticationManager
            -customerRepository : CustomerRepository
            -userAccountManager : UserAccountManager

            +getAll() : ArrayList<? extends Customer>
            +get(Long) : Customer
            +saveAll(Iterable<S >) : <S extends Customer> Iterable<S>
            +save(S) : <S extends Customer> S
            +delete(Long) : void
            +customerToUser(Customer) : UserAccount
            +userToCustomer(UserAccount) : Optional<Customer>
            +publishEvent(Customer, EntityLevel) : void

        }


        interface CustomerRepository <<Repository>> {
            +findAll() : ArrayList<Customer>
            +findByEmail(String) : Optional<Customer>
        }
        
        class UserAccController <<Controller>>  {
            -authentictaionManager : AuthenticationManager
            -userAccountManager : UserAccountManager

            +changePassword(String, String, String) : String
            +resetPassword(String) : String
        }
        

        class UserAccEventListener {
            -logger : Logger
            -userAccountManager : UserAccountManager

            UserAccEventListener(UserAccountManager, CustomerRepository)
            +listenCustomerEvent(EntityEvent<Customer>) : void
            +save(Customer, String) : void
        }
        note right: listen to CustomerEvent

       
        Customer --> Sex
        Customer --> CustomerType
        CustomerRepository --> Customer
        CustomerController --> Customer
        CustomerManager --> Customer
        CustomerManager --> CustomerRepository
    }



    namespace bioladen.event {
        class EntityCreatedEvent {

        }
        EntityCreatedEvent --|> org.salespointframework.context.ApplicationEvent



    }

    namespace ressources.templates {

        VIEW(register.html) {

        }

        VIEW(customerlist.html) {

        }

        VIEW(profil.html) {

        }


        profil.html <-- bioladen.customer.UserAccController
        customerlist.html <-- bioladen.customer.CustomerController
        register.html <-- bioladen.customer.CustomerController
        customerlist.html <.left. register.html

    }

}





rectangle spring-data-comments-2.1.0.RELEASE.jar as spring {

    package org.springframework.data.repository {
        interface CrudRepository <T, ID> <<Spring>>{
            <S extends T> +save(S) : S
            <S extends T> +saveAll(Iterable<Sâ€‹>) : Iterable<S>
            +findById(ID) : Optional<T>
            +existsById(ID) : boolean
            +findAll() : Iterable<T>
            +findAllById(Iterable<ID>) : Iterable<T>
            +count() : long
            +deleteById(ID) : void
            +delete(T) : void
            +deleteAll(Iterable<? extends T>) : void
            +deleteAll() : void
        }

        bioladen.customer.CustomerRepository --|> CrudRepository
    }

}



org.salespointframework.useraccount.UserAccountRepository  *--  org.salespointframework.useraccount.UserAccount
org.salespointframework.useraccount.UserAccountRepository --|> CrudRepository: <<binds>>\n<UserAccount, UserAccountIdentifier>
bioladen.customer.UserAccController "1" --> "1" org.salespointframework.useraccount.UserAccountManager: \n\nUSER_ACCOUNTS
bioladen.customer.UserAccController "1" --> "1" org.salespointframework.useraccount.UserAccountRepository
bioladen.customer.UserAccController ..> BusinessTime


bioladen.customer.Customer --> org.salespointframework.useraccount.UserAccount
bioladen.customer.UserAccController --> org.salespointframework.useraccount.UserAccount
bioladen.customer.UserAccEventListener --> org.salespointframework.useraccount.UserAccount

@enduml