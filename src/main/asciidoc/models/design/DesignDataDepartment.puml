@startuml

!include stylesheet.iuml

rectangle Bioladen {
    namespace bioladen.event {



        class EntityEvent<T>{
            -entity : T
            -eventLevel : EntityLevel
            -message : String
            -name : String
            -publisherName : String
            -involvedUser : UserAccount
            -resolvableType : ResolvableType

            EntityEvent(T, EntityLevel)
            EntityEvent(T, EntityLevel, String)
            EntityEvent(T, EntityLevel, UserAccount)
            EntityEvent(T, EntityLevel, UserAccount, String)
            +getResolvableType() : ResolvableType
        }
    }


    namespace bioladen.datahistory {

        class DataHistoryManager <<Service>> {
            -customerManager : CustomerManager
            -dataEntryRepository : DataEntryRepository
            -businessTime : BusinessTime
            -publisher : ApplicationEventPublisher
            
            -log(EntityLevel, T, String message, String publisherName, Customer) : <T> DataEntry
            +push(T, EntityLevel, String, Customer) : <T> DataEntry
            +push(T, EntityLevel, String) : <T> DataEntry
            +push(T, EntityLevel, Customer) : <T> DataEntry
            +push(T, EntityLevel) : <T> DataEntry
            +push(T) : <T extends EntityEvent> DataEntry 
            -publishEvent(DataEntry, String) : void
        }

        class DataEntry<T> <<Entity>>{
            -id : Long
            -entityLevel : EntityLevel
            -thrownBy : String
            -publisherName : String
            -saveTime : LocalDateTime
            -entity : T
            -message : String
            -name : String
            -involvedCustomer : Customer
            -declaredFields : Map<String, String>
            -declaredModifiedFields : Map<String, String>
            -entityBeforeModified : T
            
            DataEntry(String name, EntityLevel, String thrownBy, T)
            -searchDeclaredFields(T) : Map<String, String>
            +getFormattedSaveTime(String) : String
            +getResolvableType() : ResolvableType
            +setMessage(String) : void
            +setEntityBeforeModified(T) : void
            +isModified(String) : boolean
            
        }

        class EntityEventListener <<Service>> {
            -dataHistoryManager: DataHistoryManager
            -logger : Logger

            EntityEventListener(DataHistoryManager, Logger)
            -listenEvent(EntityEvent) : void
        }

        interface DataEntryRepository <<Repository>> {
            +findAllByOrderBySaveTimeDesc() : ArrayList<DataEntry>
        }

        class DataHistoryController <<Controller>> {
            +dataHistory() : String
        }

        enum EntityLevel {
            CREATED
            MODIFIED
            DELETED

            -className : String
        }

        DataEntry "1" --> "1" bioladen.event.EntityLevel
        DataEntry "0..*" --* "1" DataHistoryManager
        EntityEventListener --> DataHistoryManager

    }



    namespace bioladen.statistic {
        class StatisticController <<Controller>> {
            +statistic() : String
        }

        enum ChartType {
            BARCHART
            PIECHART
            LINECHART
        }

        class ChartFactory {

        }


    }


    namespace ressources.templates {

        VIEW(statistic.html) {

        }

        VIEW(datahistory.html) {

        }

        bioladen.statistic.StatisticController --> statistic.html
        bioladen.datahistory.DataHistoryController --> datahistory.html
    }



}

rectangle salespoint-framework-7.0.0.RELEASE.jar {
    namespace org.salespointframework.time {

        interface BusinessTime <<Salespoint>> {

        }

        BusinessTime <-right- bioladen.datahistory.DataEntry
    }
}


rectangle spring-data-comments-2.1.0.RELEASE.jar as spring {
    namespace org.springframework.context{

        class ApplicationEvent <<Spring>>{
            {static} - serialVersionUID : long
            - timestamp : long
            + ApplicationEvent(Object)
            + getTimestamp() : long
        }

        interface ApplicationEventPublisher <<Spring>>{
            publishEvent(ApplicationEvent) : void
            publishEvent(Object) : void
        }

        interface ApplicationListener <E extends ApplicationEvent> <<Spring>>{
            onApplicationEvent(E) : void
        }

        ApplicationEvent "*" <-- "1" ApplicationListener: <<binds>>\n ApplicationEvent
        ApplicationEventPublisher "1" --> "*" ApplicationEvent
    }

    namespace org.springframework.data.repository {
        interface Repository <<Spring>> {

        }

        interface CrudRepository <<Spring>> {

        }
    }

    namespace org.springframework.core {
        interface ResolvableTypeProvider <<Spring>> {

        }
    }

}

bioladen.datahistory.DataEntryRepository --|> org.springframework.data.repository.Repository
bioladen.datahistory.DataEntryRepository --|> org.springframework.data.repository.CrudRepository
bioladen.event.EntityEvent ..|> org.springframework.core.ResolvableTypeProvider


@enduml