@startuml

!include stylesheet.iuml

rectangle Bioladen {

    namespace bioladen.datahistory {

        class DataEntry<T> <<Entity>> implements RawEntry{
            -id : Long
            -entityLevel : EntityLevel
            -thrownBy : String
            -publisherName : String
            -saveTime : LocalDateTime
            -entity : T
            -message : String
            -name : String
            -involvedCustomer : Customer
            -declaredFields : Map<String, String>
            -declaredModifiedFields : Map<String, String>
            -entityBeforeModified : T
            
            DataEntry(String name, EntityLevel, String thrownBy, T)
            -searchDeclaredFields(T) : Map<String, String>
            +getFormattedSaveTime(String) : String
            +getResolvableType() : ResolvableType
            +setMessage(String) : void
            +setEntityBeforeModified(T) : void
            +isModified(String) : boolean
        }

        class DataHistoryLogger <<Service>> {
            -dataHistoryManager: DataHistoryManager
            -logger : Logger

            DataHistoryLogger(DataHistoryManager, Logger)
            -listenEvent(DataEntry) : void
        }

        interface DataEntryRepository <<Repository>> {
            +findAllByOrderById() : ArrayList<DataEntry>
            +findAllByOrderByIdDesc() : ArrayList<DataEntry>
            +findByEntityLevelAndSaveTimeBetweenOrderBySaveTimeDesc() : ArrayList<DataEntry>
        }

        class DataHistoryManager<T> {
            -customerTools : CustomerTools
            -dataEntryRepository : DataEntryRepository
            -businessTime : BusinessTime

            -log(String, T, EntityLevel, String, String, UserAccount) : DataEntry
            +push(String, T, EntityLevel, String, UserAccount) : DataEntry
            +push(String, T, EntityLevel, String) : DataEntry
            +push(String, T, EntityLevel, UserAccount) : DataEntry
            +push(String, T, EntityLevel) : DataEntry
            +findBy(Class, EntityLevel, Interval) : Listy<DataEntry>
            +findLatestCreatedOrModified(T) : DataEntry
            +setApplicationEventPublisher(ApplicationEventPublisher) : void
            -publishEvent(DataEntry) : void
        }

        class DataHistoryRequest {
            -clazz : Class
            -entityLevel : EntityLevel

            +DataHistoryRequest(Class, EntityLevel)
        }

        class DataHistoryController <<Controller>> {
            -dataEntryRepository : DataEntryRepository

            +dataHistory() : String
        }

        enum EntityLevel {
            CREATED
            MODIFIED
            DELETED

            -className : String
        }

        interface RawEntry {
            +getId() : Long
            +sumUp(String, Double) : Double
            +defineCharts() : Map<String, DataHistoryRequest>
        }

        DataEntry "1" --> "1" EntityLevel
        DataEntry "0..*" --* "1" DataHistoryManager
        DataHistoryLogger --> DataHistoryManager
        DataHistoryRequest --> EntityLevel
        DataHistoryController --> DataEntryRepository

    }



    namespace bioladen.statistic {
        class StatisticController <<Controller>> {
            -businessTime : BusinessTime
            -dataHistoryManager DataHistoryManager;
            -chartFactory ChartFactory;
            -customerStatistic CustomerStatistic;
            -financesStatistic FinancesStatistic;

            +datahistory() : String
        }

        class FinancesStatistic {
            -dataHistoryManager : DataHistoryManager

            +amountOfSalesBetween(Interval) : int
            +amountOfCancelsBetween(Interval) : int
            +salesBetween(Interval) : List
            +cancelsBetween(Interval) : List
        }

        class CustomerStatistic {
            -dataHistoryManager : DataHistoryManager

            +amountOfCustomersCreatedBetween(Interval) : int
            +amountOfCustomersDeletedBetween(Interval) : int
            +amountOfCustomersModifiedBetween(Interval) : int
            +customersCreatedBetween(Interval) : List
            +customersDeletedBetween(Interval) : List
            +customersModifiedBetween(Interval) : List
        }

        StatisticController --> FinancesStatistic
        StatisticController --> CustomerStatistic


        namespace bioladen.chart {

            class ChartFactory {
                -dataHistoryManager : DataHistoryManager

                +getBarChart(ChronoUnit, Interval, RawEntry) : LineCharts
                +getRequest(DataHistoryRequest, Interval) : List
            }

            interface Charts {
                +getJsonCharts() : String
                +size() : int
            }

            class DateTimeCharts implements Charts {
                -currentResolution : ChronoUnit
                -currentInterval : Interval
                -inputMap : Map<String, List<DataEntry>>
                -zeroMap : Map<LocalDateTime, Double>
                -chartData : Map<String, double[]>
                -chartLabels : List<String>

                +DateTimeCharts(ChronoUnit, Interval, Map<String, List<DataEntry>>)
                -fillCharts() : void
                -generateRawMap(ChronoUnit, Interval) : Map<LocalDateTime, Double>
                -truncate(LocalDateTime, ChronoUnit) : LocalDateTime
                -doubleConverter(List<Double>) : double[]
                +getChartLabels() : String[]
                +size() : int
            }

            class LineCharts extends DateTimeCharts {
                +LineCharts(ChronoUnit, Interval, Map<String, List<DataEntry>>)
                +getJsonCharts() : String
            }

        }

    }


    namespace ressources.templates {

        VIEW(statistic.html) {

        }

        VIEW(datahistory.html) {

        }

        bioladen.statistic.StatisticController --> statistic.html
        bioladen.datahistory.DataHistoryController --> datahistory.html
    }



}

rectangle salespoint-framework-7.0.0.RELEASE.jar {
    namespace org.salespointframework.time {

        interface BusinessTime <<Salespoint>> {

        }

        BusinessTime <-right- bioladen.datahistory.DataEntry
    }
}


rectangle spring-data-comments-2.1.0.RELEASE.jar as spring {
    namespace org.springframework.context{

        class ApplicationEvent <<Spring>>{
            {static} - serialVersionUID : long
            - timestamp : long
            + ApplicationEvent(Object)
            + getTimestamp() : long
        }

        interface ApplicationEventPublisher <<Spring>>{
            publishEvent(ApplicationEvent) : void
            publishEvent(Object) : void
        }

        interface ApplicationListener <E extends ApplicationEvent> <<Spring>>{
            onApplicationEvent(E) : void
        }

        ApplicationEvent "*" <-- "1" ApplicationListener: <<binds>>\n ApplicationEvent
        ApplicationEventPublisher "1" --> "*" ApplicationEvent
    }

    namespace org.springframework.data.repository {
        interface Repository <<Spring>> {

        }

        interface CrudRepository <<Spring>> {

        }
    }

    namespace org.springframework.core {
        interface ResolvableTypeProvider <<Spring>> {

        }
    }

}

bioladen.datahistory.DataEntryRepository --|> org.springframework.data.repository.Repository
bioladen.datahistory.DataEntryRepository --|> org.springframework.data.repository.CrudRepository
bioladen.event.EntityEvent ..|> org.springframework.core.ResolvableTypeProvider


@enduml